{"version":3,"sources":["components/FeedbackLogic/FeedbackLogic.module.css","components/FeedbackTitle/FeedbackTitle.jsx","components/FeedbackLogic/FeedbackLogic.jsx","App.js","reportWebVitals.js","index.js","components/FeedbackTitle/FeedbackTitle.module.css"],"names":["module","exports","Title","text","className","s","title","Feedback","options","onButtonClick","event","setState","prevState","item","target","name","toLowerCase","countTotalFeedback","countPositiveFeedbackPercentage","total","good","neutral","bad","positive","positiveFeedback","Math","floor","renderFeedback","paragraph","state","wrapper","this","map","option","type","button","onClick","container","values","negativeTitle","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,OAAS,8BAA8B,QAAU,+BAA+B,UAAY,iCAAiC,MAAQ,6BAA6B,UAAY,iCAAiC,OAAS,8BAA8B,cAAgB,uC,0JCKzQC,MAJf,YAA0B,IAATC,EAAQ,EAARA,KACf,OAAO,oBAAIC,UAAWC,IAAEC,MAAjB,SAAyBH,K,oDCsFnBI,E,kDApFb,cAA0B,IAAD,EAAXC,EAAW,EAAXA,QAAW,4BACvB,gBAWFC,cAAgB,SAACC,GACf,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAOH,EAAMI,OAAOC,KAAKC,cAC/B,OAAO,eAAGH,EAAOD,EAAUC,GAAQ,MAErC,EAAKI,qBACL,EAAKC,mCAlBkB,EAqBzBD,mBAAqB,SAACP,GACpB,EAAKC,UAAS,SAACC,GACb,MAAO,CAAEO,MAAOP,EAAUQ,KAAOR,EAAUS,QAAUT,EAAUU,SAvB1C,EA2BzBJ,gCAAkC,SAACR,GACjC,EAAKC,UAAS,SAACC,GACb,IAAMW,GACFX,EAAUQ,KAAOR,EAAUS,UAC1BT,EAAUQ,KAAOR,EAAUS,QAAUT,EAAUU,KAClD,IACF,MAAO,CAAEE,iBAAkBC,KAAKC,MAAMH,QAjCjB,EAqCzBI,eAAiB,WACf,OACE,qCACE,oBAAGvB,UAAWC,IAAEuB,UAAhB,mBAAkC,EAAKC,MAAMT,QAC7C,oBAAGhB,UAAWC,IAAEuB,UAAhB,sBAAqC,EAAKC,MAAMR,WAChD,oBAAGjB,UAAWC,IAAEuB,UAAhB,kBAAiC,EAAKC,MAAMP,OAC5C,oBAAGlB,UAAWC,IAAEuB,UAAhB,oBAAmC,EAAKC,MAAMV,SAC9C,oBAAGf,UAAWC,IAAEuB,UAAhB,UACG,IADH,sBAEsB,EAAKC,MAAML,iBAFjC,WA1CJ,EAAKK,MAAQ,CACXT,KAAM,EACNC,QAAS,EACTC,IAAK,EACLH,MAAO,EACPK,iBAAkB,GAEpB,EAAKhB,QAAUA,EATQ,E,0CAoDzB,WAAU,IAAD,OACP,OACE,qCACE,qBAAKJ,UAAWC,IAAEyB,QAAlB,SACGC,KAAKvB,QAAQwB,KAAI,SAACC,GAAD,OAChB,wBAEEC,KAAK,SACLnB,KAAMkB,EACN7B,UAAWC,IAAE8B,OACbC,QAAS,EAAK3B,cALhB,SAOGwB,GANIA,QAWX,sBAAK7B,UAAWC,IAAEgC,UAAlB,UACE,oBAAIjC,UAAWC,IAAEC,MAAjB,wBACA,qBAAKF,UAAWC,IAAEiC,OAAlB,SACwB,IAArBP,KAAKF,MAAMV,MACV,oBAAIf,UAAWC,IAAEkC,cAAjB,kCAEAR,KAAKJ,6B,GA5EIa,IAAMC,WCDvBjC,EAAU,CAAC,OAAQ,UAAW,OAWrBkC,MATf,WACE,OACE,qCACE,cAAC,EAAD,CAAOvC,KAAK,0BACZ,cAAC,EAAD,CAAUK,QAASA,QCGVmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfA3C,EAAOC,QAAU,CAAC,MAAQ,gC","file":"static/js/main.14895f50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackLogic_button__-7UUD\",\"wrapper\":\"FeedbackLogic_wrapper__1w2c_\",\"container\":\"FeedbackLogic_container__2b1F4\",\"title\":\"FeedbackLogic_title__2Brul\",\"paragraph\":\"FeedbackLogic_paragraph__3o_Em\",\"values\":\"FeedbackLogic_values__zXga4\",\"negativeTitle\":\"FeedbackLogic_negativeTitle__2Cl2W\"};","import s from \"components/FeedbackTitle/FeedbackTitle.module.css\";\n\nfunction Title({ text }) {\n  return <h1 className={s.title}>{text}</h1>;\n}\n\nexport default Title;\n","// import Buttons from \"components/FeedbackButons/FeedbackButtons\";\nimport React from \"react\";\nimport s from \"components/FeedbackLogic/FeedbackLogic.module.css\";\n\nclass Feedback extends React.Component {\n  constructor({ options }) {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n      total: 0,\n      positiveFeedback: 0,\n    };\n    this.options = options;\n  }\n\n  onButtonClick = (event) => {\n    this.setState((prevState) => {\n      const item = event.target.name.toLowerCase();\n      return { [item]: prevState[item] + 1 };\n    });\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = (event) => {\n    this.setState((prevState) => {\n      return { total: prevState.good + prevState.neutral + prevState.bad };\n    });\n  };\n\n  countPositiveFeedbackPercentage = (event) => {\n    this.setState((prevState) => {\n      const positive =\n        ((prevState.good + prevState.neutral) /\n          (prevState.good + prevState.neutral + prevState.bad)) *\n        100;\n      return { positiveFeedback: Math.floor(positive) };\n    });\n  };\n\n  renderFeedback = () => {\n    return (\n      <>\n        <p className={s.paragraph}>Good: {this.state.good}</p>\n        <p className={s.paragraph}>Neutral: {this.state.neutral}</p>\n        <p className={s.paragraph}>Bad: {this.state.bad}</p>\n        <p className={s.paragraph}>Total: {this.state.total}</p>\n        <p className={s.paragraph}>\n          {\" \"}\n          Positive feedback: {this.state.positiveFeedback}%\n        </p>\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <div className={s.wrapper}>\n          {this.options.map((option) => (\n            <button\n              key={option}\n              type=\"button\"\n              name={option}\n              className={s.button}\n              onClick={this.onButtonClick}\n            >\n              {option}\n            </button>\n          ))}\n        </div>\n\n        <div className={s.container}>\n          <h2 className={s.title}>Statistics</h2>\n          <div className={s.values}>\n            {this.state.total === 0 ? (\n              <h3 className={s.negativeTitle}>Feedback never given</h3>\n            ) : (\n              this.renderFeedback()\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Feedback;\n","import \"./App.css\";\nimport Title from \"components/FeedbackTitle/FeedbackTitle\";\nimport Feedback from \"components/FeedbackLogic/FeedbackLogic\";\nconst options = [\"Good\", \"Neutral\", \"Bad\"];\n\nfunction App() {\n  return (\n    <>\n      <Title text=\"Please leave feedback\" />\n      <Feedback options={options} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FeedbackTitle_title__o89IT\"};"],"sourceRoot":""}