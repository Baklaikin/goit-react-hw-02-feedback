{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/FeedbackLogic/FeedbackLogic.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positiveFeedback","className","s","container","values","negativeTitle","paragraph","FeedbackOptions","options","onLeaveFeedback","wrapper","map","option","type","name","button","onClick","Section","title","children","Feedback","onButtonClick","event","setState","prevState","item","target","toLowerCase","countTotalFeedback","countPositiveFeedbackPercentage","positive","Math","floor","state","this","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4310d728.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Statistics_container__3m23k\",\"title\":\"Statistics_title__3oEux\",\"values\":\"Statistics_values__3GzyZ\",\"negativeTitle\":\"Statistics_negativeTitle__1jMKc\",\"paragraph\":\"Statistics_paragraph__2yScf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3xQcc\",\"wrapper\":\"FeedbackOptions_wrapper__2B0Kn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1R4J_\"};","import s from \"components/Statistics/Statistics.module.css\";\n\nfunction Statistics({ good, neutral, bad, total, positiveFeedback }) {\n  const renderFeedback = () => {\n    return (\n      <>\n        <p className={s.paragraph}>Good: {good}</p>\n        <p className={s.paragraph}>Neutral: {neutral}</p>\n        <p className={s.paragraph}>Bad: {bad}</p>\n        <p className={s.paragraph}>Total: {total}</p>\n        <p className={s.paragraph}>Positive feedback: {positiveFeedback}%</p>\n      </>\n    );\n  };\n  return (\n    <div className={s.container}>\n      <div className={s.values}>\n        {total === 0 ? (\n          <h3 className={s.negativeTitle}>No feedback given</h3>\n        ) : (\n          renderFeedback()\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Statistics;\n","import s from \"components/FeedbackOptions/FeedbackOptions.module.css\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className={s.wrapper}>\n      {options.map((option) => (\n        <button\n          key={option}\n          type=\"button\"\n          name={option}\n          className={s.button}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n","import s from \"components/Section/Section.module.css\";\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nexport default Section;\n","import React from \"react\";\nimport Statistics from \"components/Statistics/Statistics\";\nimport FeedbackOptions from \"components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"components/Section/Section\";\n\nclass Feedback extends React.Component {\n  constructor({ options }) {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n      total: 0,\n      positiveFeedback: 0,\n    };\n    this.options = options;\n  }\n\n  onButtonClick = (event) => {\n    this.setState((prevState) => {\n      const item = event.target.name.toLowerCase();\n      return { [item]: prevState[item] + 1 };\n    });\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = (event) => {\n    this.setState((prevState) => {\n      const { good, neutral, bad } = prevState;\n      return { total: good + neutral + bad };\n    });\n  };\n\n  countPositiveFeedbackPercentage = (event) => {\n    this.setState((prevState) => {\n      const { good, neutral, bad } = prevState;\n      const positive = ((good + neutral) / (good + neutral + bad)) * 100;\n      return { positiveFeedback: Math.floor(positive) };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad, total, positiveFeedback } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.options}\n            onLeaveFeedback={this.onButtonClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positiveFeedback={positiveFeedback}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default Feedback;\n","import \"./App.css\";\nimport Feedback from \"components/FeedbackLogic/FeedbackLogic\";\nconst options = [\"Good\", \"Neutral\", \"Bad\"];\n\nfunction App() {\n  return <Feedback options={options} />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}